diff --git a/components/sync/engine_impl/syncer.cc b/components/sync/engine_impl/syncer.cc
index d4d745fcd5a2d254dfcbdc44ed370e4479b28698..d65fb08ede95311a71daf7ff9f8c6190ac626697 100644
--- a/components/sync/engine_impl/syncer.cc
+++ b/components/sync/engine_impl/syncer.cc
@@ -112,6 +112,12 @@ bool Syncer::DownloadAndApplyUpdates(ModelTypeSet* request_types,
   GetUpdatesProcessor get_updates_processor(
       cycle->context()->model_type_registry()->update_handler_map(), delegate);
   SyncerError download_result;
+  // TODO(darkdh): dispatch request to UI and pass back the result
+  // syncer will be alive as long as sync is enabled
+  brave_sync::GetRecordsCallback on_get_records =
+    base::BindRepeating(&Syncer::OnGetRecords, base::Unretained(this));
+  for (auto& observer : *cycle->context()->listeners())
+    observer.OnPollSyncCycle(on_get_records);
   do {
     download_result =
         get_updates_processor.DownloadUpdates(&download_types, cycle);
@@ -167,9 +173,14 @@ SyncerError Syncer::BuildAndPostCommits(const ModelTypeSet& request_types,
       break;
     }
 
-    SyncerError error = commit->PostAndProcessResponse(
-        nudge_tracker, cycle, cycle->mutable_status_controller(),
-        cycle->context()->extensions_activity());
+    // SyncerError error = commit->PostAndProcessResponse(
+    //     nudge_tracker, cycle, cycle->mutable_status_controller(),
+    //     cycle->context()->extensions_activity());
+    SyncerError error(SyncerError::SYNCER_OK);
+    // TODO(darkdh): do coversion to brave sync record and dispatch to UI thread
+    for (auto& observer : *cycle->context()->listeners())
+      observer.OnNudgeSyncCycle();
+
     commit->CleanUp();
     if (error.value() != SyncerError::SYNCER_OK) {
       return error;
